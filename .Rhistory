add2 <- function(x,y){
x + y
}
add2(3,8)
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above10(x)
above(x, 15)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
search()
library(datasets)
data("iris")
?iris
mean(iris)
mean(iris,na.rm = TRUE)
head(iris)
mean(split(iris, 3))
library(datasets)
data("iris")
head(iris)
a <- split(iris, species$Species)
a <- split(iris, iris$Species)
a
head(iris)
sapply(a, function(x) colMeans(x[,c("Species"]))
sapply(a, function(x) colMeans(x[,c("Species"])))
sapply(a, function(x) colMeans(x[, "Species"]))
sapply(a, function(x) colMeans(x[, c("Sepal.Length","Species"]))
sapply(a, function(x) colMeans(x[, c("Sepal.Length","Species")]))
sapply(a, function(x) colMeans(x[, c("Sepal.Length","Sepal.Width")]))
apply(iris[, 1:4], 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
debug(ls)
ls()
head(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
a <-split(mtcars, mtcars$cyl)
a
sapply(a, function(x) colMeans(x[,c("mpg","hp")],na.rm = TRUE))
209.2143-82.63636
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
setwd("C:/Users/Doug/ProgrammingAssignment2")
x <- cbind(c(1,2),c(2,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
makeCacheMatrix(x)
a<-makeCacheMatrix(x)
cachesolve(a)
cacheSolve(a)
cachesolve(a)
cacheSolve(a)
